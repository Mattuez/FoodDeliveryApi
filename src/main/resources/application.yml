spring:
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}/fooddeliveryapi?createDatabaseIfNotExist=true&serverTimeZone=UTC
    username: root
    password: ${DB_PASSWORD:M_th__s03!}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 10
      idle-timeout: 10000
  session:
    store-type: none
  jackson:
    deserialization:
      fail-on-unknown-properties: true
      fail-on-ignored-properties: true
  mvc:
    throw-exception-if-no-handler-found: true
    pathmatch:
      matching-strategy: ant_path_matcher
  jpa:
    properties:
      #javax:
        #persistence:
          #schema-generation:
            #scripts:
              #action: create
              #create-target: src/main/resources/ddl.sql
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    show-sql: true
  flyway:
    baseline-on-migrate: true
    locations: classpath:db/migration, classpath:db/testdata
  web:
    resources:
      add-mappings: false
  servlet:
    multipart:
      max-file-size: 1MB
      max-request-size: 20MB
  mail:
    host: smtp.sendgrid.net
    port: 587
    username: apikey
    password:
  security:
    oauth2:
      resourceserver:
        jwt:
          public-key-location: classpath:keys/foodDelivery-pkey.pem
        #opaquetoken:
          #introspection-uri: http://localhost:8081/oauth/check_token
          #client-id: checkToken
          #client-secret: check123

foodDeliveryApi:
  storage:
    local:
      pictures-directory: src/main/resources/photos
  email:
    sender: FoodDelivery <fooddeliveryapiteste@gmail.com>
    impl: sand_box
food-delivery:
  jwt:
    keystore:
      resource: classpath:keys/foodDelivery.jks
      pass: 123456
      alias: foodDelivery